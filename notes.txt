Pres:


1:

Hello everyone! I am thrilled to be here at this conference sponsored by my favorite group in tech, UtahJS.

I owe this community so much and am so excited for the opportunity to contribute to this experience.

My name is Drew Warren and my talk is titled "Framework Free: Functional HTML Rendering and State Management in Vanilla JS", so if you're looking for advice on optimizing your Angular app, you are in the wrong place!

If you want to hear about how your habits and prejudice might be getting in the way of your engagement with JavaScript, then stick around and I'll try to keep you entertained for the next half hour.

2:

This is my face. This is my Twitter handle and this is my username on the UtahJS Slack Org.

Who here is not in the UtahJS Slack? Go to slack.utahjs.com, put in your e-mail and join. You will not regret it.

You'll get help with your code in "how do I do x", you'll get advice on interviewing and comp negotiation on "career talk". You'll find invaluable resources on specific subsections in the countless channels. You will level up just from lurking... and might even find some friends. It's amazing.

Like I've said before, I owe this community so much and am always looking for a way to give back, so please @ me, slide into my DMs or start a thread in "accessibility" and I'll be in touch.

3:

Before we get into the meat and potatoes of my talk I want to preface this by saying that I am not an expert.

There's a reason why you don't already follow me on Twitter.

There's a reason why I applied to speak in the Beginner track for this conference.

I am a late bloomer, without a CS degree who learns by doing... and I've only been doing this for about three years.

I still have a lot to learn and I may have something wrong.

I respectfully ask that if you do hear me saying something that is untrue or misleading, please point it out to me... but do it after the talk.

Hit me up on Twitter or on Slack and I will make sure to improve my presentation and make the correction public.

Thank you!

4:

This is a talk about using DOM APIs exposed to JavaScript to manipulate elements on a web page without having to write any HTML.

We're going to learn how index.html can a blank canvas and we can create nodes, append children, remove nodes, update properties, attach event listeners and apply styles all through Vanilla JavaScript.

We're going to talk about Single Page Apps, Functional Programming, Higher Order Functions and State.

We're going to look at examples in code that I promise you will understand and be able to use without any configuration or setup.

It's gonna be rad.

5:

Who will benefit from this talk? Hopefully everyone here will learn something, but I have two specific groups in mind.

The first group of folks are perhaps self-taught, or hobbyists. Or maybe a die-hard JS fanatic who shivers when you hear the word ECMAScript and thinks the language peaked in 2015.

These folks are either resisting frameworks intentionally or they are intimidated by the learning curve. Maybe you gave it a shot and it just didn't "click".

My hope is that some of the principles I discuss will help you think about how to leverage JavaScript to make a modern web experience that can segue into the proper framework when the problem you want to solve is complex.

The second group has been growing exponentially over the past three years, especially here in SLC. These are boot camp grads.

If you spent about a week or two learning JavaScript before jumping right into a modern web framework and never looked back, then I hope this talk will show you that a lot of your favorite things from React, Angular and Vue can be accomplished without those tools. You might be using a sledgehammer to drive a thumb tack.

When I graduated from a dev bootcamp three years ago, this was me and we'll hear about that in a bit.

Speaking of hammers, there's an idea called Maslow's hammer that you'll hear said as "If all you have is a hammer, everything looks like a nail."

I'm hoping if your sights are aimed low and you aren't looking at Frameworks or if your sights are so high you don't even write JS anymore, that we can find a middle ground here.

6:

ACCESSIBILITY TIP #1: Don't convey information with only color. WCAG 1.4.1. As you can see here I've highlighted my text with orange, or maybe you can't see that because you have achromatopsia, a severe color blindness that makes you only able to see black, white and grey. That's why there's an underline here to convey that same information.

So I want to take a few minutes to establish some vocabulary and give context into what I mean with the title of my talk. First, what do I mean when I say "Framework Free". What is a framework?

A web framework is a software framework that is designed to support the development of web applications including web services, web resources, and web APIs. Web frameworks provide a standard way to build and deploy web applications on the World Wide Web. Web frameworks aim to automate the overhead associated with common activities performed in web development.

Examples include jQuery, Backbone.js, AngularJS, Angular, EmberJS, ReactJS and Vue.js

I can already here some of you muttering under your breath "React isn't a framework." "jQuery is a fast, small and feature-rich JavaScript library!"

For the purposes of this talk the terms "Library" and "Framework" are going to be synonymous.

After my own research on the differences between the two, I have yet to find a set of definitions that has provided me any value outside of pedantics so we're just going to ignore them.

For the next little bit let's think about it this way. If you're importing someone else's code and it's making you write your code in a way that isn't valid JavaScript, you're using a framework.

7:

What is Functional HTML Rendering?

Simply put, we're going to use Functional Programming techniques with JavaScript to render HTML elements.

So what is Functional Programming?

Well, I don't have the time or the expertise to fully explain the ins and outs of FP, but I will try to explain a few of the important principles and how we can take advantage of them.

First is the concept of a "Pure Function". A pure function is a function that given the same input, will always return the same output and also produces no side effects.

Second is "Composition". Composition is the act of combining small methods into a larger task. We want to create specialized functions that do one thing and then we can string them together or pass them into each other to accomplish more complex tasks.

Last is "Immutability". Immutability is the idea of not changing the contents of a variable once it has been created. A common technique to achieve immutability is that instead of changing a variable, we create a new variable and assign to it any work we have done.

That's my 30 second lesson on Functional Programming. I highly encourage you to build something with a functional programming language because I think that is the best way to understand the paradigm and that the lessons you'll learn will make you a better JavaScript developer.

8:

My definition of "Vanilla JS" for the purpose of this talk means JavaScript that can be run in any major browser with no compiling or importing.

I know that we engineers tend to be a bit pedantic and while this trait is not my wife's favorite of mine, I believe that in order to understand each other, we have to say what we mean.

So I want to be very clear, the DOM APIs we're discussing are not "JavaScript". The DOM was actually designed to be independent of any one programming language.

Similarly, JavaScript is not limited to only running in the browser. This is how we have server side javascript with NodeJS.

It is in the web browsers that we are able to directly access DOM API's using JavaScript. The browser parses the HTML text into nodes and objects, called the Document Object Model so programming languages can connect to the page.

When we call document.createElement we are using a JavaScript method supported by the browser to access the DOM API.

Quick Disclaimer: The DOM is inherently Object Oriented, so unfortunately you're going to see some actions that break the rules we laid out for Functional Programming, but we're going to do the best we can.

So again - Vanilla JS means JavaScript that can run in any major browser. No build step, no compiler, no webpack, no babel needed.

9:

One last bit of vocabulary and then we'll start looking at some code.

Single Page Application vs Multiple Page Application.

I'm sure most of you have heard of a "Single Page App", but it's important to understand the concept with regards to Functionally rendered HTML.

A Single Page App is just that, an application that exists on a single page. You have one HTML file and rather than routing to other HTML files, you use JavaScript to update the HTML.

One of the benefits is that all of the resources of an app can be loaded once. Further actions of the user won't trigger another load. Once an SPA is loaded, you can theoretically disconnect from the internet and continue to use the application to go from view to view.

This does lead to a longer initial load time, which is a tradeoff. Some other tradeoffs can come in the form of SEO or Search Engine Optimization, browser history behavior like whether your back button works, and of course if a user disables JavaScript the app won't work.

There are workarounds, meta tags can help with SEO, url parameter manipulation if you want that back button and no script tags to try and at least tell your user to enable JS.

These are some things to consider before deciding whether an SPA is the right choice for your app... but if it is... let's talk about how to make one.

10:

First we need our blank canvas. As you can see here, we've got a nearly empty HTML file.

A title, a link to a stylesheet, a script to load our JS and an empty body tag. I've given it an id of "app" but as you can see it's self closing with no content.

Completely Blank.

Isn't this exciting? I'm starting to sweat up here looking at this. It's beautiful.

Why? Well if you can't feel it then that probably means you've never written hundreds of lines of HTML... and then re-written those hundreds of lines of HTML... and then hunted through those hundreds of lines of HTML element by element making slight updates.

Just looking at this you can already tell you're never going to have to do that.

Which is great, right? We're not at UtahHTML Conf. We're JavaScript developers! Come on!

11:

So we've got this blank canvas and now we want to put something on there. Let's get some elements on this bad boy.

As with most things in development, there are many ways to get this done, but here are two methods to wet your whistle.

Not shown, but I functionally added a container div with the class ".js-hello-container"

In our first function, we're calling document.querySelector to target this container div by its class name and set it to a variable.

Then we're calling document.createElement to create a paragraph element and setting that to a variable.

Next we set the className property of the element. This lets us add a class. "Class" is a reserved keyword in JavaScript, which is why the property is called className.

Next we call the createTextNode function with a string. This returns a text node that contains that string. This is really complex stuff and I am amazed by your brilliance if you're still following me.

Penultimately we append our text node to our paragraph element and finally we append our paragraph element to our container div using the element's "appendChild" method.

A few things to note here, the createElement function will take any HTML element as its first argument. There is an optional second argument, but it's not supported in Internet Explorer so we're not going to use it.

I heard those groans but the fact is in June 2019 IE accounted for 5-14% of desktop browser traffic and I'm personally not interested in ignoring those people.

In this second function we take a different approach. We create the element as a div and then use the outerHTML property to more or less rewrite it.

There is an innerHTML property that will go inside the tags. This is kind of like adding a text node.

On the other hand, outerHTML is a one-stop shop for applying an id, a class, an event handler, or a data attribute. It will set the the tags themselves as well as anything inside them.

Any valid HTML string in here is going to work. In this example I'm transforming an empty div to a heading level 1 with a class name and text node. Then I append it to my container.

12:

Now we've got some HTML. Great. But our user wants to visit another page and we can't just keep tacking stuff on to the bottom, so we've got to clean up our mess and start fresh.

We start by grabbing a reference to the parent element we want to remove the contents of. Here I've chosen my hello container, but you can target the body, target the id of "app" or anything else.

Now the easiest way is just to set the innerHTML to an empty string. This will take all the children nodes and elements and replace them with an empty string.

However, there are other ways to accomplish this, such as this while loop in the first function. This loop looks for the first child of our targeted element and as long as it finds one, it will call removeChild on it.

I have not been able to find an understanding of why the first function is faster than the second, but I have found several performance measurements that show that it is to the tune of about 80%.

If you know why this is, please reach out to me. I'm sorry.

Alright so we're adding elements and we're removing elements, but this doesn't look any better than writing raw HTML. You're asking yourself "Why the heck would I want to write 3 or 4 functions to get a single line of HTML?"

13:

Here's where composition comes back into play. So we've got our function that does one thing. Well instead of one string we want to show in HTML, what if we have an array of strings. We can pass our functions into a higher order function like the map method available on Arrays to return an HTML element for each value in the array.

So here instead of making 1 element by writing 3 functions, we're making 4 elements by writing 4 functions. What if we want 40 elements? How about 400?

Did you know that there are roughly 6,500 spoken languages in the world today? You can render them all with these four functions.

Now I hope you're not asking yourself why the heck you would want to do this anymore.

So let's say we have our 6,500 greetings and instead of divs we want them rendered as LI elements. We just got back from a talk about accessibility and we learned that semantic HTML is important for users who depend on screen readers and that semantic HTML elements come with all sorts of accessibility benefits right out of the box. (That was accessibility tip #2)

All we do is change our container to a "ul" and then that one parameter from "div" to "li" and our work is done.

Easy, right?

14:

I'm not going to spend too much time here, but I don't want to leave anyone behind, so if you haven't used a "map" function on an array before, or if you heard me say "Higher Order Function" and you thought "pikachu-what-face.jpg" then let's catch you up real quick.

At its core, a Higher order function is a one that takes a function as a parameter. This parameter function is often referred to as a callback.

You can build your own higher order functions to do all sorts of wonderful things like piping, mapping, flat mapping and all sorts of combinators that will blow your mind.

One of my favorites is to take an array of objects and return an object whose keys are some value from the objects (like an id) and the value is the object itself. This object structure is often called a "dictionary" because it lets you easily lookup the objects with something like dictionary.id.

There are a few that are natively included in JavaScript as Array methods demonstrated here: map, filter and reduce.

My favorite explanation of these is this nifty graphic from an article on atendesigngroup.com.

Map will take an array of values and give you a new array of the same length with some action being performed on each value. Like taking an apple and giving you a slice of an apple, or taking a string and giving you an HTML element wrapping that string.

Filter will take an array and give you a new array of objects that pass a certain boolean check. Like taking an apple, an orange and a banana and giving you back just the ones that are an apple. Or taking an array of greeting strings and giving you just ones that are "Hello"

Reduce will take an array and give you something new by performing an action on each item. Like taking three fruits and returning one fruit salad. Or turning an array of objects into a dictionary object.

Higher Order Functions really are the bread and butter of taking data structures and returning HTML.

15:

I've probably said the word "render" about a dozen times at this point.

The Oxford dictionary will give you the following definition for the word, render:
"To cause to be or become; to make".

So what is a render function?

A render function is a function you can call that will cause your app to be or become. It will make your application.

In this example, my render function is this "showPageOne" function. It first clears out the contents of the app to give a blank canvas, then it calls this buildHeader function which gives me a nav bar to show page one and page two, then it calls this firstBuild function which gives me the content of page one.

What does a render function require? Well if it's going to make your app, then it needs to understand the state of your app to know what to cause your app to be or become.

16:

Application State can be tough to define without breaking the taboo of defining something without using the word in the definition.

I can say Application state is the state of your application and we can all nod our heads and say "Yes, indeed", because it seems self evident.

I'll take a stab at doing a little bit better though:

Application state is the information necessary for your render process to display the proper elements with the proper attributes.

I think that's pretty good.

So using that definition we can manage state in a couple of different ways but you better believe they're all going to involve functions. The more complex the app, the more functions your render is going to have to call to display the proper elements with the proper attributes.

We can do this dynamically, like in my showPageOne function. No matter where you came from, when you call this, you're going to end up on page one.

We can also do it by passing in state as an object into a render function like so.

Clearing the page, building a layout with a piece of the state, adding content with a piece of the state and then adding progress with a piece of the state. We should have time to check that out at the end.

17:

State is great and all, but the internet by default is stateless, so how do we handle that?

We need to store our state somewhere we can access after our session. To really have some permanence we'd want to store this in a database, but if the application isn't so important that losing the state is going to have a severe negative impact on our user, then we can use localStorage.

localStorage is going to let us cache information in the browser and access it at a later point. Since I'm storing an object I actually have to turn that object into a string and parse it when I pull it out using the stringify and parse methods of the JSON API.

In this example I have an initialState as a fallback because there are quite a few ways a user could intentionally or accidentally clear their localStorage.

When I increment my slide I will call that with either my initial state or my localStorage state if it exists. I'm creating a variable that is an object that looks like my state, but the value will go up one unless I'm at the end of my slides, then it will reset to zero.

It's important to note here, I didn't mutate the state object that I got, I created a new object. Then I'm using Object.assign with a blank object to create a new object that clones my starting state and replaces only fields from my updated state.

18:

ACCESSIBILITY TIP #3: If you have animations on your page, you should be aware that some users can suffer from seizures or migraines from too much changing color or movement on a page. It's best to manually trigger the start of an animation rather than autoplay, but if you're going to autoplay you should also either auto-stop or have a way for the user to stop the animation. I made some gifs with Gifox and my Gifox gifs play 3 times and then stop.

Okay, now we know how to use VanillaJS to make SPAs... but why?

Was this purely an academic endeavor? Did our quest to find out of we could eclipse our responsibility to ask if we should?

No!

There are some objective benefits as well some subjective ones that you'll get if you go framework free.

First, Errors. Let's compare the console error we get when we try to reference an undefined variable in JS and in ReactJS.

We see at the top here the message tells us the line on which the error occurred, the function called that reached the error, the function that called that function and the line that function was called on. Succinct, accurate, meaningful.

If you have experience with React, I'm sure you've already found the relevant information in this bottom message but I doubt you can tell me with a straight face that you prefer it to the top one.

19:

The next benefit is Code Readability.

Let's compare the source code of a Hello World SPA in JS and one in ReactJS.

This is more readable. For all.

This includes yourself while you're developing, other contributors to your project and anyone that finds your app.

None of your function declarations are hidden in an npm_modules folder. No one needs to know which versions you're on (just check the method on MDN, if it it's green it's good!)

Finally a user can actually inspect your page and find your files. Not a minified, compiled version of your files, but your files.

This could be a high school student that dreams of dabbling with development. This could be a potential contributor who finds a bug and shoots you the exact line number, without having to first find you on github. This could be another dev that really likes a technique you implemented and learns directly from the source how to emulate it.

That's how we're going to make the world a better place. With readable, accessible approachable code.

20:

Your role models did this. Probably.

These are some of my dev role models. I asked them if they used Vanilla JS.

AJ - Taught me that newer isn't always better.

Tanner - Taught me how to help other developers

Kyle - Lamented about what we've lost by not being able to inspect the source

Kent - Taught me patterns for using and testing React that I applied to this talk

21:

So we've talked about how, we've talked about why, but when should you drop your framework in favor of Vanilla JS?

I'll be honest. Not that often.

If you have lot's of Asynchronous, Animations, shared state across different parts of your app, you will benefit greatly from something like React, Angular or Vue.

When: Maybe you want to help a Local Business market themselves, Maybe you have an idea for Simple Application that can make an impact, Maybe you want to make a slide show for a Conference Presentation. Check it out

22:

Find a way to improve the world. If you're lucky it will be your job. If you aren't finding that at your job, it's time to start your side project.

23:

Don't fall into my trap! I wish I had React for this

24:

I challenge you

25:

I want to see it!

26:

Corrections, Misrepresentations. The last thing I want to do is point someone down the wrong path. Sharing knowledge is noble, sharing lies is evil.

27:

Thank you, UtahJS for the chance to speak. Thank you all for spending the last half hour with me. I hope to hear from you. Let's make the world a better place, together!

Thank you!
